Machine#name
Machine#sees
Machine#extendsClause
Machine#sets
Machine#promotes
Machine#properties
Machine#invariant
Machine#assertions
Machine#initialization
Machine#operations
Machine#concreteConstants
Machine#concreteVariables
AbstractMachine#name
AbstractMachine#sees
AbstractMachine#extendsClause
AbstractMachine#sets
AbstractMachine#promotes
AbstractMachine#properties
AbstractMachine#invariant
AbstractMachine#assertions
AbstractMachine#initialization
AbstractMachine#operations
AbstractMachine#concreteConstants
AbstractMachine#concreteVariables
AbstractMachine#constraints
AbstractMachine#includes
AbstractMachine#usesClause
AbstractMachine#abstractConstants
AbstractMachine#abstractVariables
Refinement#name
Refinement#sees
Refinement#extendsClause
Refinement#sets
Refinement#promotes
Refinement#properties
Refinement#invariant
Refinement#assertions
Refinement#initialization
Refinement#operations
Refinement#concreteConstants
Refinement#concreteVariables
Refinement#includes
Refinement#abstractConstants
Refinement#abstractVariables
Implementation#name
Implementation#sees
Implementation#extendsClause
Implementation#sets
Implementation#promotes
Implementation#properties
Implementation#invariant
Implementation#assertions
Implementation#initialization
Implementation#operations
Implementation#concreteConstants
Implementation#concreteVariables
Implementation#imports
Implementation#values
Operation#name
Operation#substitution
Operation#inputParams
Operation#outputParams
QuantifiedPredicate#stringRepr
QuantifiedPredicate#predicate
QuantifiedPredicate#variables
AtomicPredicate#stringRepr
AtomicPredicate#expression
AtomicPredicate#sign
Implication#stringRepr
Implication#consequent
Implication#antecedent
UniversallyQuantified#stringRepr
UniversallyQuantified#predicate
UniversallyQuantified#variables
ExistentiallyQuantified#stringRepr
ExistentiallyQuantified#predicate
ExistentiallyQuantified#variables
FunctionalExpression#sign
FunctionalExpression#expression
FunctionalExpression#sign
Case#case
Case#branch
Case#else
Any#any
Any#where
Any#thenPart
Let#variable
Let#predicate
Let#in
Call#variable
Call#actualParam
Call#operationName
While#while
While#do
While#invariant
While#variant